/**
 * Definition for binary tree
 * class TreeNode {
 *     int val;
 *     TreeNode left;
 *     TreeNode right;
 *     TreeNode(int x) {
 *      val = x;
 *      left=null;
 *      right=null;
 *     }
 * }
 */
// public class Solution {
//     // DO NOT MODIFY THE ARGUMENTS WITH "final" PREFIX. IT IS READ ONLY
//     public TreeNode sortedArrayToBST(final int[] A) {
//         if(A.length==0)
//         return null;
//         return helper(A);
//     }
//     public TreeNode helper(int[] arr)
//     {   if(arr.length<1)
//         return null;
//         int mid=arr.length/2;
//         TreeNode out=new TreeNode(arr[mid]);
//         out.left=helper(Arrays.copyOfRange(arr,0,mid));
//         out.right=helper(Arrays.copyOfRange(arr,mid+1,arr.length));
//         return out;
//     }
// }
public class Solution {
    
    private TreeNode toBST(MyList<Integer> nums, int start, int end) {
        if(start > end) {
            return null;
        }
        
        int mid = (start + end)/2;
        TreeNode root =  new TreeNode(nums.get(mid));
        root.left = toBST(nums, start, mid - 1);
        root.right = toBST(nums, mid + 1, end);
        
        return root;
    }
    
    // DO NOT MODIFY THE ARGUMENTS WITH "final" PREFIX. IT IS READ ONLY
    public TreeNode sortedArrayToBST(MyList<Integer> A) {
        if(A.size() == 0) {
            return null;
        }
        return toBST(A, 0, A.size() - 1);
    }
}
